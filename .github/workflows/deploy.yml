name: Unit Tests

permissions:
  pull-requests: write

on:
  push:
    branches:
      - main
      - code-cov
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest # GitHub-hosted runner
    outputs:
      message: ${{ steps.snyk.outputs.message }}
    environment:
      name: test
    services:
      db_graphql:
        image: postgres:13-alpine
        env:
          HOST_PORT: ${{ vars.HOST_PORT }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Snyk
        uses: snyk/actions/setup@master

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Lint with Ruff
        id: ruff
        uses: chartboost/ruff-action@v1
        with:
          src: './src'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check for security vulnerabilities
        id: snyk

        run: | #check for specical characters in the output (newline, etc)
          snyk auth ${{ secrets.SNYK_TOKEN }}
          result=$(snyk test --severity-threshold=critical)
          echo "message=${$result//$'\n'/\\n}" >> "$GITHUB_OUTPUT"

      - name: Run Unit Tests
        env:
          HOST_URL: ${{ vars.HOST_URL }}
          HOST_PORT: ${{ vars.HOST_PORT }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_SERVER: ${{ vars.POSTGRES_SERVER }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        run: |
          python test.py

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests

      - name: SonarCloud Scan
        id: sonarcloud
        uses: sonarsource/sonarcloud-github-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Comment Results
        uses: thollander/actions-comment-pull-request@v2.5.0
        if: github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ github.token }}
          message: |
            # Pipeline Results
            ## Linting
            ${{ steps.ruff.conclusion }}
            ## Security
            ${{ steps.snyk.outputs.message }}

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to Dockerhub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ci-gitactions:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ci-gitactions:latest
